---
# tasks file for ansible-role-wvd-rdagent
- name: install powershell core
  ansible.windows.win_package:
    path: '{{ powershell_core_download_url }}'
    product_id: '{{ powershell_core_product_id }}'
    state: present
    arguments: '/quiet ADD_EXPLORER_CONTEXT_MENU_OPENPOWERSHELL={{ powershell_core_add_explorer_context_menu_openpowershell }} ENABLE_PSREMOTING={{ powershell_core_enable_psremoting }} REGISTER_MANIFEST={{ powershell_core_register_manifest }}'
  ignore_errors: yes
  register: powershell_core_install_result

- name: Wait 60 seconds, but only start checking after 3 seconds
  wait_for_connection:
    delay: 3
    timeout: 60
  when: powershell_core_install_result.rc != 0

- name: install powershell core (2nd try)
  ansible.windows.win_package:
    path: '{{ powershell_core_download_url }}'
    product_id: '{{ powershell_core_product_id }}'
    state: present
    arguments: '/quiet ADD_EXPLORER_CONTEXT_MENU_OPENPOWERSHELL={{ powershell_core_add_explorer_context_menu_openpowershell }} ENABLE_PSREMOTING={{ powershell_core_enable_psremoting }} REGISTER_MANIFEST={{ powershell_core_register_manifest }}'
  register: powershell_core_install_result2
  when: powershell_core_install_result.rc != 0

- name: Test powershell core
  ansible.windows.win_shell: |
    get-host
  args:
    executable: '{{ powershell_core_executable }}'
  changed_when: False


- name: PSGallery set trusted
  ansible.windows.win_shell: | 
    Set-PSRepository -Name 'PSGallery' -InstallationPolicy Trusted
  args:
    executable: '{{ powershell_core_executable }}'

- name: Get-AzWvdRegistrationInfo
  ansible.windows.win_shell: | 
    Install-Module -name Az.DesktopVirtualization -Confirm:$false | out-null
    $SecureStringPassword = ConvertTo-SecureString "{{ wvd_rdagent_client_secret }}" -AsPlainText -Force
    $pscredential = New-Object System.Management.Automation.PSCredential -ArgumentList "{{ wvd_rdagent_client_id }}", $SecureStringPassword
    Connect-AzAccount -ServicePrincipal -Credential $pscredential -Tenant "{{ wvd_rdagent_tenant_id }}" | out-null
    
    New-AzWvdRegistrationInfo -ResourceGroupName "{{ wvd_rdagent_resource_group }}" -HostPoolName "{{ wvd_rdagent_host_pool }}" -SubscriptionId "{{ wvd_rdagent_subscription_id }}" -ExpirationTime $((get-date).ToUniversalTime().AddHours(2).ToString('yyyy-MM-ddTHH:mm:ss.fffffffZ')) | out-null
    $token = Get-AzWvdRegistrationInfo -ResourceGroupName "{{ wvd_rdagent_resource_group }}" -HostPoolName "{{ wvd_rdagent_host_pool }}" -SubscriptionId "{{ wvd_rdagent_subscription_id }}"
    
    Write-Host $token.Token      
  args:
    executable: '{{ powershell_core_executable }}'
  register: az_wvd_registrationinfo_token
  tags:
    - wvd-rdagent-registrationinfo

- debug:
    msg: "{{ az_wvd_registrationinfo_token.stdout_lines | list | last | trim }}"
  tags:
    - wvd-rdagent-registrationinfo


- name: Ensure {{ wvd_rdagent_download_dir }} exists
  ansible.windows.win_file:
    path: "{{ wvd_rdagent_download_dir }}"
    state: directory

- name: Install AVD Agent and Bootloader
  block:
    - name: Download Azure Virtual Desktop Agent {{ wvd_rdagent_download_url }}
      ansible.windows.win_get_url:
        follow_redirects: "{{ wvd_rdagent_follow_redirects | default(omit) }}"
        force: "{{ wvd_rdagent_download_force | default(omit) }}"
        dest: '{{ wvd_rdagent_download_dir }}\{{ wvd_rdagent_download_filename }}'
        url: "{{ wvd_rdagent_download_url }}"
        validate_certs: '{{ validate_certs | default(omit) }}'
        proxy_password: '{{ proxy_password | default(omit) }}'
        proxy_url : '{{ proxy_url  | default(omit) }}'
        proxy_use_default_credential: '{{ proxy_use_default_credential | default(omit) }}'
        proxy_username: '{{ proxy_username | default(omit) }}'
      register: wvd_rdagent_download_result

    - name: Debug wvd_rdagent_download_result
      ansible.builtin.debug:
        var: wvd_rdagent_download_result

    - name: Install package for {{ wvd_rdagent_download_url }}
      ansible.windows.win_package:
        arguments: "{{ wvd_rdagent_install_arguments }} REGISTRATIONTOKEN={{ az_wvd_registrationinfo_token.stdout_lines | list | last | trim }}"
        chdir: "{{ wvd_rdagent_install_chdir | default(omit) }}"
        creates_path: "{{ wvd_rdagent_install_creates_path | default(omit) }}"
        creates_service: "{{ wvd_rdagent_install_creates_service | default(omit) }}"
        creates_version: "{{ wvd_rdagent_install_creates_version | default(omit) }}"
        expected_return_codes: "{{ wvd_rdagent_install_expected_return_codes | default(omit) }}"
        follow_redirects: "{{ wvd_rdagent_install_follow_redirects | default(omit) }}"
        log_path: "{{ wvd_rdagent_install_log_path | default(omit) }}"
        path: "{{ wvd_rdagent_download_result.dest }}"
        product_id: "{{ wvd_rdagent_install_product_id | default(omit) }}"
        provider: "{{ wvd_rdagent_install_provider | default(omit) }}"
        state: "{{ wvd_rdagent_install_state | default('present') }}"
        validate_certs: "{{ wvd_rdagent_install_validate_certs | default(omit) }}"
        wait_for_children: "{{ wvd_rdagent_install_wait_for_children | default(omit) }}"
      register: wvd_rdagent_install_package_result

    - name: Debug wvd_rdagent_install_package_result
      ansible.builtin.debug:
        var: wvd_rdagent_install_package_result


    - name: Download Azure Virtual Desktop Agent Bootloader {{ wvd_rdagentbootloader_download_url }}
      ansible.windows.win_get_url:
        follow_redirects: "{{ wvd_rdagentbootloader_follow_redirects | default(omit) }}"
        force: "{{ wvd_rdagentbootloader_download_force | default(omit) }}"
        dest: '{{ wvd_rdagentbootloader_download_dir }}\{{ wvd_rdagentbootloader_download_filename }}'
        url: "{{ wvd_rdagentbootloader_download_url }}"
        validate_certs: '{{ validate_certs | default(omit) }}'
        proxy_password: '{{ proxy_password | default(omit) }}'
        proxy_url : '{{ proxy_url  | default(omit) }}'
        proxy_use_default_credential: '{{ proxy_use_default_credential | default(omit) }}'
        proxy_username: '{{ proxy_username | default(omit) }}'
      register: wvd_rdagentbootloader_download_result

    - name: Debug wvd_rdagentbootloader_download_result
      ansible.builtin.debug:
        var: wvd_rdagentbootloader_download_result

    - name: Install package for {{ wvd_rdagentbootloader_download_url }}
      ansible.windows.win_package:
        arguments: "{{ wvd_rdagentbootloader_install_arguments | default(omit) }}"
        chdir: "{{ wvd_rdagentbootloader_install_chdir | default(omit) }}"
        creates_path: "{{ wvd_rdagentbootloader_install_creates_path | default(omit) }}"
        creates_service: "{{ wvd_rdagentbootloader_install_creates_service | default(omit) }}"
        creates_version: "{{ wvd_rdagentbootloader_install_creates_version | default(omit) }}"
        expected_return_codes: "{{ wvd_rdagentbootloader_install_expected_return_codes | default(omit) }}"
        follow_redirects: "{{ wvd_rdagentbootloader_install_follow_redirects | default(omit) }}"
        log_path: "{{ wvd_rdagentbootloader_install_log_path | default(omit) }}"
        path: "{{ wvd_rdagentbootloader_download_result.dest }}"
        product_id: "{{ wvd_rdagentbootloader_install_product_id | default(omit) }}"
        provider: "{{ wvd_rdagentbootloader_install_provider | default(omit) }}"
        state: "{{ wvd_rdagentbootloader_install_state | default('present') }}"
        validate_certs: "{{ wvd_rdagentbootloader_install_validate_certs | default(omit) }}"
        wait_for_children: "{{ wvd_rdagentbootloader_install_wait_for_children | default(omit) }}"
      register: wvd_rdagentbootloader_install_package_result

    - name: Debug wvd_rdagentbootloader_install_package_result
      ansible.builtin.debug:
        var: wvd_rdagentbootloader_install_package_result
  when:
    - az_wvd_registrationinfo_token is defined
    - az_wvd_registrationinfo_token.stdout_lines is defined